const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const mkdir = promisify(fs.mkdir);
const exists = promisify(fs.exists);

// Utility to convert kebab-case to PascalCase
function toPascalCase(str) {
  return str
    .split('-')
    .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1))
    .join('');
}

async function generateCoreIcons() {
  try {
    // Paths
    const ICONS_DIR = path.resolve(__dirname, '../icons');
    const CORE_ICONS_DIR = path.resolve(__dirname, '../packages/iconiq/src/icons');

    // Ensure the output directory exists
    if (!(await exists(CORE_ICONS_DIR))) {
      await mkdir(CORE_ICONS_DIR, { recursive: true });
    }

    // Get all JSON files from the icons directory
    const iconFiles = (await readdir(ICONS_DIR)).filter(file => file.endsWith('.json'));

    // Generate imports and exports
    const imports = [];
    const exports = [];
    const iconsExports = [];

    // Process each icon file
    for (const file of iconFiles) {
      const iconName = path.basename(file, '.json');
      const pascalName = toPascalCase(iconName);

      // Add import
      imports.push(`import ${pascalName}Icon from '../../icons/${iconName}.json';`);

      // Add export
      exports.push(`export const ${pascalName} = ${pascalName}Icon;`);

      // Add to icons object
      iconsExports.push(`  ${pascalName},`);
    }

    // Generate the index content
    const indexContent = `// This file is auto-generated by the build script
// DO NOT EDIT MANUALLY

import { IconData } from '@iconiq/shared';

${imports.join('\n')}

${exports.join('\n')}

// All available icons
export const Icons = {
${iconsExports.join('\n')}
};
`;

    // Write the index file
    await writeFile(path.join(CORE_ICONS_DIR, 'index.ts'), indexContent);

    console.log(`Generated core exports for ${iconFiles.length} icons`);
  } catch (error) {
    console.error('Error generating core icons:', error);
    process.exit(1);
  }
}

// Run the generation
generateCoreIcons();
