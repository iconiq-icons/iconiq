const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const mkdir = promisify(fs.mkdir);
const exists = promisify(fs.exists);

// Utility to convert kebab-case to PascalCase
function toPascalCase(str) {
  return str
    .split('-')
    .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1))
    .join('');
}

// Generate a React component from icon data
function generateReactComponent(iconName, iconData, variant = 'outline') {
  const componentName = `${toPascalCase(iconName)}${variant !== 'outline' ? toPascalCase(variant) : ''}`;

  return `import React from 'react';
import { createIconiqIcon } from '../createIconiqIcon';
import { IconData } from '@iconiq/shared';

// Icon data
const iconData: IconData = ${JSON.stringify(iconData, null, 2)};

/**
 * ${componentName} icon component
 */
export const ${componentName} = createIconiqIcon('${iconName}', iconData, '${variant}');
`;
}

// Generate the index file with all exports
function generateIndexFile(components) {
  const imports = components.map(({ componentName }) => `export * from './${componentName}';`).join('\n');

  return `// This file is auto-generated by the build script
// DO NOT EDIT MANUALLY

${imports}

/**
 * All available icons as a record
 */
export const icons = {
${components.map(({ componentName }) => `  ${componentName},`).join('\n')}
};
`;
}

async function generateReactComponents() {
  try {
    // Paths
    const ICONS_DIR = path.resolve(__dirname, '../icons');
    const REACT_ICONS_DIR = path.resolve(__dirname, '../packages/iconiq-react/src/icons');

    // Ensure the output directory exists
    if (!(await exists(REACT_ICONS_DIR))) {
      await mkdir(REACT_ICONS_DIR, { recursive: true });
    }

    // Get all JSON files from the icons directory
    const iconFiles = (await readdir(ICONS_DIR)).filter(file => file.endsWith('.json'));

    // Track all components for the index file
    const components = [];

    // Process each icon file
    for (const file of iconFiles) {
      const iconName = path.basename(file, '.json');
      const iconContent = await readFile(path.join(ICONS_DIR, file), 'utf8');
      const iconData = JSON.parse(iconContent);

      // Generate a component for each variant that exists in the icon data
      const variants = Object.keys(iconData.variants);

      for (const variant of variants) {
        const componentName = `${toPascalCase(iconName)}${variant !== 'outline' ? toPascalCase(variant) : ''}`;
        const componentCode = generateReactComponent(iconName, iconData, variant);

        // Write component file
        await writeFile(
          path.join(REACT_ICONS_DIR, `${componentName}.tsx`),
          componentCode
        );

        // Add to components list for index
        components.push({ componentName, variant });
      }
    }

    // Generate and write the index file
    const indexContent = generateIndexFile(components);
    await writeFile(path.join(REACT_ICONS_DIR, 'index.ts'), indexContent);

    console.log(`Generated ${components.length} icon components`);
  } catch (error) {
    console.error('Error generating components:', error);
    process.exit(1);
  }
}

// Run the generation
generateReactComponents();
